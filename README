1. Introduction
In this project, I built a simulator that can simulate four types of memory hierarchy: L1 cache only,  L1 cache + L2 cache. 
The accompanying project report delves into the analysis of different cache setups, elucidating the interplay among block offsets, cache size, and associativity. All caches are instantiated with the least-recently-used (LRU) replacement policy and adopt a write-back + write-allocate (WBWA) write policy.

2. Files Introduction
cache.cc -> L1, L2 cache class
cache.h  -> header file of cache.cc
sim.cc   -> the file to read the input file and execute the main program
sim.h    -> header file of sim

3. cmd for control input pattern
1. Type "make" to build.  (Type "make clean" first if you already compiled and want to recompile from scratch.)

2. Run trace reader:

   To run without throttling output:
   ./sim 32 8192 4 262144 8 3 10 ../example_trace.txt

   To run with throttling (via "less"):
   ./sim 32 8192 4 262144 8 3 10 ../example_trace.txt | less

   To run and confirm that all requests in the trace were read correctly:
   ./sim 32 8192 4 262144 8 3 10 ../example_trace.txt > echo_trace.txt
   diff ../example_trace.txt echo_trace.txt
	The result of "diff" should indicate that the only difference is that echo_trace.txt has the configuration information.
	0a1,10
	> ===== Simulator configuration =====
	> BLOCKSIZE:  32
	> L1_SIZE:    8192
	> L1_ASSOC:   4
	> L2_SIZE:    262144
	> L2_ASSOC:   8
	> PREF_N:     3
	> PREF_M:     10
	> trace_file: ../example_trace.txt
	> ===================================

